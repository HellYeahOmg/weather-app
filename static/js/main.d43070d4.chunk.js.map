{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","_this$props","temperature","city","country","humidity","descr","done","error","className","API_KEY","App","state","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","description","t0","alert","stop","Title_Title","Form_Form","Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,uLAL2BC,IAAMC,YCApBC,mLAEjB,OACEL,EAAAC,EAAAC,cAAA,QAAMI,SAAUC,KAAKC,MAAMC,YACzBT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3CZ,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,UAAUC,YAAY,yCAC9CZ,EAAAC,EAAAC,cAAA,mGAN0BC,IAAMC,WCAnBS,mLACV,IAAAC,EASHP,KAAKC,MAPPO,EAFKD,EAELC,YACAC,EAHKF,EAGLE,KACAC,EAJKH,EAILG,QACAC,EALKJ,EAKLI,SACAC,EANKL,EAMLK,MACAC,EAPKN,EAOLM,KACAC,EARKP,EAQLO,MAEF,OAAOD,EACLpB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,WACbtB,EAAAC,EAAAC,cAAA,wGACoBc,EADpB,KAC4BC,GAE5BjB,EAAAC,EAAAC,cAAA,oEAAegB,EAAf,MACAlB,EAAAC,EAAAC,cAAA,gFAAiBa,GACjBf,EAAAC,EAAAC,cAAA,oEAAeiB,IAEfE,GAEA,YAtB6BlB,IAAMC,WCIrCmB,EAAU,mCAEKC,6MACnBC,MAAQ,CACNV,YAAa,KACbC,KAAM,KACNC,QAAS,KACTE,MAAO,KACPE,MAAO,KACPH,SAAU,KACVE,MAAM,KAGRX,iDAAa,SAAAiB,EAAMC,GAAN,IAAAX,EAAAC,EAAAW,EAAAC,EAAA,OAAAC,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAETN,EAAEQ,iBACEnB,EAAOW,EAAES,OAAOC,SAASrB,KAAKsB,MAC9BrB,EAAUU,EAAES,OAAOC,SAASpB,QAAQqB,MAJ/BN,EAAAE,KAAA,EAKcK,MAAK,qDAAAC,OAC2BxB,EAD3B,KAAAwB,OACmCvB,EADnC,WAAAuB,OACoDjB,EADpD,0BALnB,cAKHK,EALGI,EAAAS,KAAAT,EAAAE,KAAA,EAQUN,EAASc,OARnB,OAQHb,EARGG,EAAAS,KAULzB,GAAQC,EACV0B,EAAKC,SAAS,CACZ7B,YAAac,EAAKgB,KAAKC,KACvB9B,KAAMa,EAAKlB,KACXM,QAASY,EAAKkB,IAAI9B,QAClBC,SAAUW,EAAKgB,KAAK3B,SACpBC,MAAOU,EAAKmB,QAAQ,GAAGC,YACvB7B,MAAM,IAGRuB,EAAKC,SAAS,CACZvB,MAAO,gGArBFW,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,SAyBTmB,MAAM,+LAzBG,yBAAAnB,EAAAoB,SAAA1B,EAAAnB,KAAA,2IA8BX,OACEP,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAD,CAAM7C,WAAYF,KAAKE,aACvBT,EAAAC,EAAAC,cAACqD,EAAYhD,KAAKkB,eA7COrB,aCIboD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d43070d4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Title extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Погода</h1>\r\n        <p>Узнать температуру, влажность...</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Form extends React.Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Страна\" />\r\n        <button>Узнать погоду</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n// остановился на 1 часу\r\n","import React from \"react\";\r\n\r\nexport default class Weather extends React.Component {\r\n  render() {\r\n    const {\r\n      temperature,\r\n      city,\r\n      country,\r\n      humidity,\r\n      descr,\r\n      done,\r\n      error\r\n    } = this.props;\r\n    return done ? (\r\n      <div className=\"weather\">\r\n        <p>\r\n          Местонахождение: {city}, {country}\r\n        </p>\r\n        <p>Влажность: {humidity}% </p>\r\n        <p>Температура: {temperature}</p>\r\n        <p>Состояние: {descr}</p>\r\n      </div>\r\n    ) : error ? (\r\n      error\r\n    ) : null;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"90cf843bc6fbabca75de9a1818a8f1eb\";\n\nexport default class App extends Component {\n  state = {\n    temperature: null,\n    city: null,\n    country: null,\n    descr: null,\n    error: null,\n    humidity: null,\n    done: false\n  };\n\n  getWeather = async e => {\n    try {\n      e.preventDefault();\n      var city = e.target.elements.city.value;\n      var country = e.target.elements.country.value;\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric&lang=ru`\n      );\n      const data = await api_call.json();\n\n      if (city && country) {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          descr: data.weather[0].description,\n          done: true\n        });\n      } else {\n        this.setState({\n          error: \"Введите значение\"\n        });\n      }\n    } catch (error) {\n      alert(\"Ошибка! Скорее всего город не найден.\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Title />\n        <Form getWeather={this.getWeather} />\n        <Weather {...this.state} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}